name: Python Application with Docker

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKERHUB_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/python-app
  VERSION: ${{ github.sha }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Run tests
      run: |
        python -m unittest test_main.py -v

  build-and-push-docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.DOCKERHUB_IMAGE }}
        tags: |
          type=raw,value=latest
          type=sha,prefix=,suffix=,format=long

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Install jq for JSON processing
      run: sudo apt-get install -y jq

    - name: Clean up old images on DockerHub
      run: |
        # Configurações
        USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"
        PASSWORD="${{ secrets.DOCKERHUB_TOKEN }}"
        REPOSITORY="python-app"
        CURRENT_TAG="${GITHUB_SHA:0:12}"
        
        # Obter token de autenticação
        AUTH_TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'${USERNAME}'", "password": "'${PASSWORD}'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
        
        # Listar todas as tags
        TAGS=$(curl -s -H "Authorization: JWT ${AUTH_TOKEN}" "https://hub.docker.com/v2/repositories/${USERNAME}/${REPOSITORY}/tags/?page_size=100" | jq -r '.results[] | .name')
        
        # Manter apenas a tag latest e a atual
        KEEP_TAGS=("latest" "$CURRENT_TAG")
        for TAG in $TAGS; do
          if [[ ! " ${KEEP_TAGS[@]} " =~ " ${TAG} " ]]; then
            echo "Removendo tag: $TAG"
            curl -X DELETE -H "Authorization: JWT ${AUTH_TOKEN}" "https://hub.docker.com/v2/repositories/${USERNAME}/${REPOSITORY}/tags/${TAG}/"
          else
            echo "Mantendo tag: $TAG"
          fi
        done
      env:
        GITHUB_SHA: ${{ github.sha }}